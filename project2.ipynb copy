{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fc792e9e",
   "metadata": {},
   "source": [
    "# COMP90051 Project 2\n",
    "**Name:** *Kechen Zhao*\n",
    "\n",
    "**Student ID:** *957398*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 962,
   "id": "iraqi-recommendation",
   "metadata": {},
   "outputs": [],
   "source": [
    "# You can add additional imports here\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "import os\n",
    "import random\n",
    "from sklearn.model_selection import train_test_split\n",
    "from collections import defaultdict\n",
    "\n",
    "import pandas as pd\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn import metrics\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.linear_model import SGDClassifier\n",
    "from sklearn import svm\n",
    "import math\n",
    "from sklearn.cluster import AgglomerativeClustering\n",
    "import itertools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 910,
   "id": "e5052765",
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "defined-great",
   "metadata": {},
   "source": [
    "## 0. Loading the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 911,
   "id": "concerned-vessel",
   "metadata": {},
   "outputs": [],
   "source": [
    "# do not edit this cell\n",
    "# load the data files (download from the LMS)\n",
    "embedded_images = np.load('images.npy')\n",
    "labels = np.load('labels.npy')\n",
    "\n",
    "# split into pool & testing\n",
    "X_pool, X_test, y_pool, y_test = train_test_split(embedded_images, labels, \n",
    "                                                  test_size=0.5, random_state=1234, shuffle=True)\n",
    "\n",
    "# sample a seed set\n",
    "np.random.seed(1234)\n",
    "label2id = defaultdict(list)\n",
    "for i, label in enumerate(y_pool):\n",
    "    label2id[label].append(i)\n",
    "seed_set = []\n",
    "for label, ids in label2id.items():\n",
    "    seed_set.extend(np.random.choice(ids, size=10, replace=False))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "naval-income",
   "metadata": {},
   "source": [
    "## 1. Applying logistic regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 912,
   "id": "palestinian-preparation",
   "metadata": {},
   "outputs": [],
   "source": [
    "#def train_logistic_regression(X, y, **args):\n",
    "def train_logistic_regression(X, y, penalty, tol, C, max_iter, solver):\n",
    "    \"\"\"\n",
    "    Train a logistic regression model on dataset (X, y) and return trained model.\n",
    "    X: matrix of real values, size n x d\n",
    "    y: vector of string labels, size n\n",
    "    args: optional arguments e.g., for hyper-parameters\n",
    "    \"\"\"\n",
    "    # your code here\n",
    "    \n",
    "    model = LogisticRegression(penalty='none',tol = tol, C = C, multi_class='multinomial', solver=solver, max_iter = max_iter)\n",
    "    model.fit(X, y)\n",
    "#     intercept = model.intercept_\n",
    "#     coefficient = model.coef_.squeeze()\n",
    "#     parameters = []\n",
    "#     parameters.append(intercept)\n",
    "#     parameters.append(coefficient)\n",
    "    return model\n",
    "\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 913,
   "id": "bored-alberta",
   "metadata": {},
   "outputs": [],
   "source": [
    "def evaluate_logistic_regression_accuracy(Xt, yt, model):\n",
    "    \"\"\"\n",
    "    Apply logistic regression prediction on dataset Xt and evaluate accuracy against yt,\n",
    "    returing the accuracy results as a scalar.\n",
    "    Xt: matrix of real values, size m x d\n",
    "    yt: vector of string labels, size m\n",
    "    \"\"\"\n",
    "    # your code here\n",
    "    \n",
    "    logmod = model\n",
    "    #logmod.fit(Xt, yt)\n",
    "    y_pred = logmod.predict(Xt)\n",
    "    scores = metrics.accuracy_score(yt, y_pred)\n",
    "    \n",
    "    return scores\n",
    "\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 914,
   "id": "b9ce8b2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# your code here for training, evaluating & plotting results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 915,
   "id": "c34027f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# hyper-parameter setup\n",
    "penalty = 'none'\n",
    "tol = 0.0001\n",
    "C = 1.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 923,
   "id": "edfa5526",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy trained based on seed set: 0.32427385892116184\n",
      "Accuracy trained based on seed set: 0.3187759336099585\n",
      "Accuracy trained based on seed set: 0.3240663900414938\n",
      "Accuracy trained based on seed set: 0.32095435684647305\n",
      "Accuracy trained based on seed set: 0.3202282157676348\n",
      "Accuracy trained based on seed set: 0.32219917012448135\n",
      "Accuracy trained based on seed set: 0.3188796680497925\n",
      "Accuracy trained based on seed set: 0.31815352697095434\n",
      "Accuracy trained based on seed set: 0.3223029045643154\n",
      "Accuracy trained based on seed set: 0.3196058091286307\n",
      "Accuracy trained based on seed set: 0.3225103734439834\n",
      "Accuracy trained based on seed set: 0.31690871369294604\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# find the suitable number of iterations\n",
    "iter_list = [1, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n",
    "\n",
    "iter_accuracy = []\n",
    "for num in iter_list:\n",
    "    model = train_logistic_regression(seed_X, np.array(seed_y), penalty, tol, C, max_iter, 'sag')\n",
    "    accuracy = evaluate_logistic_regression_accuracy(X_test, y_test, model)\n",
    "    print(\"Accuracy trained based on seed set:\", accuracy)\n",
    "    iter_accuracy.append(accuracy)\n",
    "    \n",
    "# plot accuracy score by seed set\n",
    "plt.plot(iter_list, iter_accuracy, 'o-')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99b629cb",
   "metadata": {},
   "source": [
    "The accuracy of model is quite stable under different number of iterations, so we choose iteration = 10."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 924,
   "id": "5ea526f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "max_iter = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 925,
   "id": "whole-grenada",
   "metadata": {},
   "outputs": [],
   "source": [
    "# seed set\n",
    "seed_X = []\n",
    "seed_y = []\n",
    "for index in seed_set:\n",
    "    seed_X.append(X_pool[index])\n",
    "    seed_y.append(y_pool[index])\n",
    "# seed_X = pd.DataFrame(seed_X)\n",
    "# seed_y = pd.DataFrame(seed_y).loc[:,0]\n",
    "\n",
    "# model = train_logistic_regression(seed_X, np.array(seed_y), penalty, tol, C, max_iter, 'sag')\n",
    "# accuracy = evaluate_logistic_regression_accuracy(X_test, y_test, model)\n",
    "# print(\"Accuracy trained based on seed set:\", accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 926,
   "id": "04692300",
   "metadata": {},
   "outputs": [],
   "source": [
    "# %%time\n",
    "# # pool set\n",
    "# model = train_logistic_regression(X_pool, y_pool, penalty, tol, C, max_iter, 'sag')\n",
    "# accuracy = evaluate_logistic_regression_accuracy(X_test, y_test, model)\n",
    "# print(\"Accuracy trained based on pool set:\", accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 927,
   "id": "882441f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy trained based on seed set by solver lbfgs: 0.27551867219917014\n",
      "Accuracy trained based on pool set by solver lbfgs: 0.34854771784232363\n",
      "Accuracy trained based on seed set by solver sag: 0.32302904564315355\n",
      "Accuracy trained based on pool set by solver sag: 0.5662863070539419\n",
      "Accuracy trained based on seed set by solver saga: 0.3196058091286307\n",
      "Accuracy trained based on pool set by solver saga: 0.5473029045643154\n",
      "Accuracy trained based on seed set by solver newton-cg: 0.31483402489626555\n",
      "Accuracy trained based on pool set by solver newton-cg: 0.5935684647302905\n"
     ]
    }
   ],
   "source": [
    "# test for different solvers\n",
    "\n",
    "# Hyper-parameters set up\n",
    "solver_list = ['lbfgs', 'sag', 'saga', 'newton-cg']\n",
    "\n",
    "accuracy_seed_solver = []\n",
    "accuracy_pool_solver = []\n",
    "for solver in solver_list:\n",
    "    model_seed = train_logistic_regression(seed_X, seed_y, penalty, tol, C, max_iter, solver)\n",
    "    seed_score = evaluate_logistic_regression_accuracy(X_test, y_test, model_seed)\n",
    "    accuracy_seed_solver.append(seed_score)\n",
    "    print(f\"Accuracy trained based on seed set by solver {solver}:\", seed_score)\n",
    "    model_pool = train_logistic_regression(X_pool, y_pool, penalty, tol, C, max_iter, solver)\n",
    "    pool_score = evaluate_logistic_regression_accuracy(X_test, y_test, model_pool)\n",
    "    accuracy_pool_solver.append(pool_score)\n",
    "    print(f\"Accuracy trained based on pool set by solver {solver}:\", pool_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 928,
   "id": "9c23f0b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.27551867219917014, 0.32302904564315355, 0.3196058091286307, 0.31483402489626555]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot accuracy score by seed set\n",
    "print(accuracy_seed_solver)\n",
    "plt.plot(solver_list, accuracy_seed_solver, 'o-')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 929,
   "id": "b51523b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.34854771784232363, 0.5662863070539419, 0.5473029045643154, 0.5935684647302905]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot accuracy score by pool set\n",
    "print(accuracy_pool_solver)\n",
    "plt.plot(solver_list, accuracy_pool_solver, 'o-')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 930,
   "id": "bcf4a381",
   "metadata": {},
   "outputs": [],
   "source": [
    "# sag is the solver with the highest accuracy\n",
    "solver = 'sag'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 931,
   "id": "a1e02914",
   "metadata": {},
   "outputs": [],
   "source": [
    "# select_model = train_logistic_regression(X_pool, y_pool, penalty, tol, C, max_iter, solver)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 932,
   "id": "cecabd91",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5224066390041494\n"
     ]
    }
   ],
   "source": [
    "model = SGDClassifier(loss='log')\n",
    "model.fit(X_pool, y_pool)\n",
    "y_pred = model.predict(X_test)\n",
    "scores = metrics.accuracy_score(y_test, y_pred)\n",
    "print(scores)\n",
    "# also tried SGDClassifier(loss='log'), but with lower accuracy score, so not consider"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "sweet-elephant",
   "metadata": {},
   "source": [
    "## 2. Active learning framework with Random selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 933,
   "id": "ignored-compromise",
   "metadata": {},
   "outputs": [],
   "source": [
    "def random_select(X, model, **args):\n",
    "    \"\"\"\n",
    "    Given an unlabelled dataset X, a matrix of n x d, and a model (not used)\n",
    "    returns a vector of scores of length n. Each entry reflects the priority \n",
    "    of the corresponding instance. Higher means better.\n",
    "    \n",
    "    \"\"\"\n",
    "    # fill in\n",
    "    n = len(X)\n",
    "    randnums = np.random.random((n,1))\n",
    "    #randnums= pd.DataFrame(np.random.random((n,1)))\n",
    "    #data = pd.DataFrame(X)\n",
    "    #data['random'] = pd.DataFrame(randnums)\n",
    "    return list(randnums)\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 934,
   "id": "4a1d8441",
   "metadata": {},
   "outputs": [],
   "source": [
    "# modified version for query committee\n",
    "\n",
    "def pool_based_active_learning(X_pool, y_pool, seed_ids,\n",
    "                               train_func, select_func,\n",
    "                               max_size, batch_size, select_method, query_method, **args):\n",
    "    \"\"\"\n",
    "    Perform an active learning simulation, which starts by training on a seed set,\n",
    "    then iteratively applies the selection function to rank instances in the pool,\n",
    "    selects the top few instances which are included into the training set and the\n",
    "    process repeats. \n",
    "        X_pool: matrix of n x d\n",
    "        y_pool: vector of string labels, size n\n",
    "        seed_ids: initial labelled set set, as a list of indices [0..n-1] into pool\n",
    "        train_func: function which given (X, y, optional args) returns a trained model\n",
    "        select_func: function which given (X, optional args) returns a sequence of scores\n",
    "        max_size: stopping condition for active learning, when labelled data reaches given size\n",
    "        batch_size: number of instances to be labelled in each iteration\n",
    "        args: optional arguments passed to training and selection function\n",
    "    returns the sequence of trained models \n",
    "    \"\"\"\n",
    "  \n",
    "    # fill in\n",
    "    \n",
    "    # construct U, the pool of unlabelled instances and their hidden labels\n",
    "    U_X = []\n",
    "    U_y = []\n",
    "    # construct L, the set of initial labelled instances\n",
    "    L_X = []\n",
    "    L_y = []\n",
    "    \n",
    "    for index in range(len(X_pool)):\n",
    "        if index not in seed_ids:\n",
    "            U_X.append(X_pool[index])\n",
    "            U_y.append(y_pool[index])\n",
    "        else:\n",
    "            L_X.append(X_pool[index])\n",
    "            L_y.append(y_pool[index])\n",
    "#     L_X = pd.DataFrame(L_X)\n",
    "#     L_y = pd.DataFrame(L_y).loc[:,0]\n",
    "\n",
    "    \n",
    "    b = batch_size\n",
    "    T = int(max_size/batch_size)\n",
    "    \n",
    "    \n",
    "    for t in range(0, T):\n",
    "        # selection method\n",
    "        if select_method == \"query_by_committee\":\n",
    "            ensemble1, ensemble2, logmod = train_committee(np.array(L_X), np.array(L_y), 'none', 0.0001, 1.0, 10, 'sag')\n",
    "            theta_t = logmod\n",
    "            if query_method == \"vote_entropy\":\n",
    "                model = [ensemble1, ensemble2]\n",
    "                labels = set(y_pool)\n",
    "                r = select_func(U_X, model, labels)\n",
    "            else:\n",
    "                model = [ensemble1, ensemble2]\n",
    "                r = select_func(U_X, model)\n",
    "        else:\n",
    "            theta_t = train_func(np.array(L_X), np.array(L_y), 'none', 0.0001, 1.0, 10, 'sag')\n",
    "            r = select_func(U_X, theta_t) # random_select\n",
    "            \n",
    "        # find the indices of top b instances in r\n",
    "        max_index = []\n",
    "        for i in range(b):\n",
    "            max_index.append(r.index(max(r)))\n",
    "            r[r.index(max(r))] = 0\n",
    "\n",
    "        for j in max_index:\n",
    "            x_j = U_X[j]\n",
    "            L_X.append(np.array(x_j))\n",
    "            U_X[j] = []\n",
    "            y_j = U_y[j]\n",
    "            L_y.append(np.array(y_j))\n",
    "            U_y[j] = np.nan\n",
    "\n",
    "        U_X = list(np.array(pd.DataFrame(U_X).dropna()))\n",
    "        U_y = list(pd.DataFrame(U_y).dropna().loc[:,0])\n",
    "        \n",
    "    return theta_t\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 935,
   "id": "lyric-constraint",
   "metadata": {},
   "outputs": [],
   "source": [
    "# def pool_based_active_learning(X_pool, y_pool, seed_ids,\n",
    "#                                train_func, select_func,\n",
    "#                                max_size, batch_size, **args):\n",
    "#     \"\"\"\n",
    "#     Perform an active learning simulation, which starts by training on a seed set,\n",
    "#     then iteratively applies the selection function to rank instances in the pool,\n",
    "#     selects the top few instances which are included into the training set and the\n",
    "#     process repeats. \n",
    "#         X_pool: matrix of n x d\n",
    "#         y_pool: vector of string labels, size n\n",
    "#         seed_ids: initial labelled set set, as a list of indices [0..n-1] into pool\n",
    "#         train_func: function which given (X, y, optional args) returns a trained model\n",
    "#         select_func: function which given (X, optional args) returns a sequence of scores\n",
    "#         max_size: stopping condition for active learning, when labelled data reaches given size\n",
    "#         batch_size: number of instances to be labelled in each iteration\n",
    "#         args: optional arguments passed to training and selection function\n",
    "#     returns the sequence of trained models \n",
    "#     \"\"\"\n",
    "  \n",
    "#     # fill in\n",
    "    \n",
    "#     # construct U, the pool of unlabelled instances and their hidden labels\n",
    "#     U_X = []\n",
    "#     U_y = []\n",
    "#     # construct L, the set of initial labelled instances\n",
    "#     L_X = []\n",
    "#     L_y = []\n",
    "    \n",
    "#     for index in range(len(X_pool)):\n",
    "#         if index not in seed_ids:\n",
    "#             U_X.append(X_pool[index])\n",
    "#             U_y.append(y_pool[index])\n",
    "#         else:\n",
    "#             L_X.append(X_pool[index])\n",
    "#             L_y.append(y_pool[index])\n",
    "# #     L_X = pd.DataFrame(L_X)\n",
    "# #     L_y = pd.DataFrame(L_y).loc[:,0]\n",
    "\n",
    "    \n",
    "#     b = batch_size\n",
    "#     T = int(max_size/batch_size)\n",
    "    \n",
    "    \n",
    "#     for t in range(0, T):\n",
    "#         #print(len(L_X))\n",
    "#         theta_t, parameters = train_func(np.array(L_X), np.array(L_y), 'none', 0.0001, 1.0, 20, 'sag')\n",
    "#         r = select_func(U_X, parameters) # random_select\n",
    "#         # find the indices of top b instances in r\n",
    "#         max_index = []\n",
    "#         for i in range(b):\n",
    "#             max_index.append(r.index(max(r)))\n",
    "#             r[r.index(max(r))] = 0\n",
    "#         remove_x = []\n",
    "#         remove_y = []\n",
    "#         for j in max_index:\n",
    "#             x_j = U_X[j]\n",
    "#             y_j = U_y[j]\n",
    "#             # add instances to labelled set\n",
    "#             L_X.append(np.array(x_j))\n",
    "#             L_y.append(np.array(y_j))\n",
    "#             # add to remove list\n",
    "#             remove_x.append(x_j)\n",
    "#             remove_y.append(y_j)\n",
    "            \n",
    "#         # remove instances from unlabelled set\n",
    "#         for index in max_index:\n",
    "#             U_X[index] = []\n",
    "#             U_y[index] = 0\n",
    "\n",
    "#         for instance in U_X:\n",
    "#             if instance != []:\n",
    "#                 next\n",
    "#             else:\n",
    "#                 U_X.remove(instance)\n",
    "        \n",
    "#         for instance in U_y:\n",
    "#             if instance == 0:\n",
    "#                 U_y.remove(instance)\n",
    "        \n",
    "#     return theta_t, parameters\n",
    "#     pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 936,
   "id": "technical-edgar",
   "metadata": {},
   "outputs": [],
   "source": [
    "# test\n",
    "# batch = 60\n",
    "# max_size = 600\n",
    "# models_random = pool_based_active_learning(X_pool, y_pool, seed_set, \n",
    "#                                     train_logistic_regression, random_select, \n",
    "#                                     max_size, batch)\n",
    "# score = evaluate_logistic_regression_accuracy(X_test, y_test, models_random)\n",
    "# print(f\"Accuracy trained based on random selection with max_size {max_size}:\", score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 937,
   "id": "complicated-allergy",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy trained based on random selection with max_size 300: 0.3699170124481328\n",
      "Accuracy trained based on random selection with max_size 600: 0.40186721991701246\n",
      "Accuracy trained based on random selection with max_size 900: 0.4219917012448133\n",
      "Accuracy trained based on random selection with max_size 1200: 0.44844398340248964\n",
      "Accuracy trained based on random selection with max_size 1500: 0.4567427385892116\n",
      "Accuracy trained based on random selection with max_size 1800: 0.45860995850622405\n",
      "Accuracy trained based on random selection with max_size 2100: 0.46929460580912863\n",
      "Accuracy trained based on random selection with max_size 2400: 0.48350622406639004\n",
      "Accuracy trained based on random selection with max_size 2700: 0.48983402489626554\n",
      "Accuracy trained based on random selection with max_size 3000: 0.49304979253112036\n"
     ]
    }
   ],
   "source": [
    "## your code here for evaluation of accuracy and \n",
    "## plotting of resultseed_score = evaluate_logistic_regression_accuracy(X_test, y_test, model_seed)\n",
    "size_list = [300, 600, 900, 1200, 1500, 1800, 2100, 2400, 2700, 3000]\n",
    "accuracy_randomSelection = []\n",
    "batch = 60\n",
    "\n",
    "for size in size_list:\n",
    "    max_size = size\n",
    "    models_random = pool_based_active_learning(X_pool, y_pool, seed_set, \n",
    "                                    train_logistic_regression, random_select, \n",
    "                                    max_size, batch, \"random_select\", \"none\")\n",
    "    score = evaluate_logistic_regression_accuracy(X_test, y_test, models_random)\n",
    "    accuracy_randomSelection.append(score)\n",
    "    print(f\"Accuracy trained based on random selection with max_size {size}:\", score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 938,
   "id": "941d0299",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.3699170124481328, 0.40186721991701246, 0.4219917012448133, 0.44844398340248964, 0.4567427385892116, 0.45860995850622405, 0.46929460580912863, 0.48350622406639004, 0.48983402489626554, 0.49304979253112036]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot accuracy score by size_list\n",
    "print(accuracy_randomSelection)\n",
    "plt.plot(size_list, accuracy_randomSelection, 'o-')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "numerical-novel",
   "metadata": {},
   "source": [
    "## 3. Uncertainty sampling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 939,
   "id": "raised-mistress",
   "metadata": {},
   "outputs": [],
   "source": [
    "def logistic_regression_entropy_select(X, model, **args):\n",
    "    \"\"\"\n",
    "    Given an unlabelled dataset X, a matrix of n x d, and a discriminative model \n",
    "    P(y|x), returns a vector of n entropy values.\n",
    "    \n",
    "    Should use intercept and coefficients from logistic regression to calculate the probability\n",
    "    for each class y we have the corresponding intercept and coefficients\n",
    "    \n",
    "    X will be served as Data Frame\n",
    "    \n",
    "    \"\"\"\n",
    "    # fill in\n",
    "    \n",
    "#     X = pd.DataFrame(X)\n",
    "#     #entropy = [];\n",
    "#     intercept = model[0]\n",
    "#     coefficient = model[1]\n",
    "    \n",
    "#     t = np.dot(X, coefficient[0]) + intercept[0]\n",
    "#     prob = 1/(1+np.exp(-t))\n",
    "#     entropy = prob*np.log(prob)\n",
    "    \n",
    "#     for i in range(1, len(intercept)):\n",
    "#         t = np.dot(X, coefficient[i]) + intercept[i]\n",
    "#         prob = 1/(1+np.exp(-t))\n",
    "#         entropy = entropy + prob*np.log(prob)\n",
    "\n",
    "    log_matrix = model.predict_proba(pd.DataFrame(X))\n",
    "    entropy = list(pd.DataFrame(-log_matrix*np.log(log_matrix)).sum(axis=1))\n",
    "        \n",
    "    return entropy\n",
    "        \n",
    "    \n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 940,
   "id": "24e6ab51",
   "metadata": {},
   "outputs": [],
   "source": [
    "# model, parameters = train_logistic_regression(seed_X, np.array(seed_y), penalty, tol, C, max_iter, 'saga')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 941,
   "id": "657e4b74",
   "metadata": {},
   "outputs": [],
   "source": [
    "# %%time\n",
    "# logistic_regression_entropy_select(seed_X, parameters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 942,
   "id": "affected-story",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# batch = 60\n",
    "# max_size = 600\n",
    "# models_us = pool_based_active_learning(X_pool, y_pool, seed_set, \n",
    "#                                  train_logistic_regression, \n",
    "#                                  logistic_regression_entropy_select, \n",
    "#                                  max_size, batch)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 943,
   "id": "aa0d28ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "# score = evaluate_logistic_regression_accuracy(X_test, y_test, models_us)\n",
    "# print(score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 944,
   "id": "optical-mount",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy trained based on entropy selection with max_size 300: 0.37147302904564317\n",
      "Accuracy trained based on entropy selection with max_size 600: 0.4032157676348548\n",
      "Accuracy trained based on entropy selection with max_size 900: 0.41514522821576766\n",
      "Accuracy trained based on entropy selection with max_size 1200: 0.43381742738589213\n",
      "Accuracy trained based on entropy selection with max_size 1500: 0.4464730290456432\n",
      "Accuracy trained based on entropy selection with max_size 1800: 0.46732365145228216\n",
      "Accuracy trained based on entropy selection with max_size 2100: 0.4815352697095436\n",
      "Accuracy trained based on entropy selection with max_size 2400: 0.4879668049792531\n",
      "Accuracy trained based on entropy selection with max_size 2700: 0.49387966804979255\n",
      "Accuracy trained based on entropy selection with max_size 3000: 0.5029045643153527\n"
     ]
    }
   ],
   "source": [
    "## your code here for evaluation of accuracy and plotting of results\n",
    "\n",
    "size_list = [300, 600, 900, 1200, 1500, 1800, 2100, 2400, 2700, 3000]\n",
    "accuracy_us = []\n",
    "batch = 60\n",
    "\n",
    "for size in size_list:\n",
    "    max_size = size\n",
    "    models_us = pool_based_active_learning(X_pool, y_pool, seed_set, \n",
    "                                 train_logistic_regression, \n",
    "                                 logistic_regression_entropy_select, \n",
    "                                 max_size, batch, \"entropy_select\", \"none\")\n",
    "    score = evaluate_logistic_regression_accuracy(X_test, y_test, models_us)\n",
    "    accuracy_us.append(score)\n",
    "    print(f\"Accuracy trained based on entropy selection with max_size {size}:\", score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 945,
   "id": "ca6ac8d7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.37147302904564317, 0.4032157676348548, 0.41514522821576766, 0.43381742738589213, 0.4464730290456432, 0.46732365145228216, 0.4815352697095436, 0.4879668049792531, 0.49387966804979255, 0.5029045643153527]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot accuracy score by size_list\n",
    "print(accuracy_us)\n",
    "plt.plot(size_list, accuracy_us, 'o-')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 946,
   "id": "6acc7a85",
   "metadata": {},
   "outputs": [],
   "source": [
    "# size_list = []\n",
    "# accuracy_us_long = []\n",
    "# for size in range(300, 3060, 60):\n",
    "#     max_size = size\n",
    "#     size_list.append(size)\n",
    "#     models_us = pool_based_active_learning(X_pool, y_pool, seed_set, \n",
    "#                                  train_logistic_regression, \n",
    "#                                  logistic_regression_entropy_select, \n",
    "#                                  max_size, batch)\n",
    "#     score = evaluate_logistic_regression_accuracy(X_test, y_test, models_us)\n",
    "#     accuracy_us_long.append(score)\n",
    "#     print(f\"Accuracy trained based on entropy selection with max_size {size}:\", score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 947,
   "id": "ba577472",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # plot accuracy score by size_list\n",
    "# print(accuracy_us)\n",
    "# plt.plot(size_list, accuracy_us_long, 'o-')\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "diverse-taxation",
   "metadata": {},
   "source": [
    "## 4. Query by committee"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 948,
   "id": "7888d7bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# don't forget to provide function descriptive comments, like those provided in templates above"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 949,
   "id": "handy-water",
   "metadata": {},
   "outputs": [],
   "source": [
    "def query_by_committee_vote_entropy(X, model, labels, **args):\n",
    "    \n",
    "    \"\"\"\n",
    "    Given an unlabelled dataset X, a matrix of n x d, and a discriminative model \n",
    "    P(y|x), returns a vector of n vote entropy values.\n",
    "    \n",
    "    C = number of models\n",
    "    \n",
    "    Need to use C number of models to predict instances in X.\n",
    "    Then for different classes of y, calculate the vote and sum them up.\n",
    "    Assume argument model contains two models. \n",
    "    \n",
    "    Arugment 'labels': a list of unique possible labels\n",
    "    \n",
    "    \"\"\"\n",
    "    \n",
    "    X = pd.DataFrame(X)\n",
    "    vote_entropy = []\n",
    "    \n",
    "    # get members in committee\n",
    "    model1 = model[0]\n",
    "    model2 = model[1]\n",
    "    \n",
    "    # use models to make predictions on the unlabelled dataset X\n",
    "    classification1 = model1.predict(X)\n",
    "    classification2 = model2.predict(X)\n",
    "\n",
    "    # loop over each instances in X, calculate their corresponding vote entropy\n",
    "    for i in range(len(X)):\n",
    "        \n",
    "        # create a dictionary to track the vote\n",
    "        dic = dict.fromkeys(labels, 0)\n",
    "        \n",
    "        predic1 = classification1[i]\n",
    "        predic2 = classification2[i]\n",
    "        \n",
    "        \n",
    "        dic[predic1] = dic[predic1] + 1\n",
    "        dic[predic2] = dic[predic2] + 1\n",
    "        \n",
    "        entropy = 0\n",
    "        for vote in dic.values():\n",
    "            if vote != 0:\n",
    "                entropy = entropy + (vote/2)*np.log(vote/2)\n",
    "            \n",
    "        vote_entropy.append(-entropy)\n",
    "        \n",
    "    return vote_entropy\n",
    "\n",
    "    pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 950,
   "id": "875a8bfb",
   "metadata": {},
   "outputs": [],
   "source": [
    "def query_by_committee_soft_vote_entropy(X, model, **args):\n",
    "    \n",
    "    \"\"\"\n",
    "    Given an unlabelled dataset X, a matrix of n x d, and a discriminative model \n",
    "    P(y|x), returns a vector of n soft vote entropy values.\n",
    "    \n",
    "    Argument model contains two sets of parameters (intercept, coefficient) of 2 different models\n",
    "    \n",
    "    C = 2: number of committee\n",
    "    \n",
    "    \"\"\"\n",
    "\n",
    "    svm = model[0]\n",
    "    logmod = model[1]\n",
    "    \n",
    "    svm_matrix = svm.predict_proba(pd.DataFrame(X))\n",
    "    log_matrix = logmod.predict_proba(pd.DataFrame(X))\n",
    "    soft_vote_entropy = list(pd.DataFrame(-((log_matrix+svm_matrix)/2)*np.log((log_matrix+svm_matrix)/2)).sum(axis=1))\n",
    "    \n",
    "    return soft_vote_entropy\n",
    "    \n",
    "    pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 951,
   "id": "37860de2",
   "metadata": {},
   "outputs": [],
   "source": [
    "def query_by_committee_KL(X, model, **args):\n",
    "    \n",
    "    \"\"\"\n",
    "    Given an unlabelled dataset X, a matrix of n x d, and a discriminative model \n",
    "    P(y|x), returns a vector of n soft vote entropy values.\n",
    "    \n",
    "    Argument model contains 2 different models\n",
    "    \n",
    "    C = 2: number of committee\n",
    "    \n",
    "    \"\"\"\n",
    "    \n",
    "    X = pd.DataFrame(X)\n",
    "    \n",
    "    svm = model[0]\n",
    "    logmod = model[1]\n",
    "    \n",
    "    svm_matrix = svm.predict_proba(pd.DataFrame(X))\n",
    "    log_matrix = logmod.predict_proba(pd.DataFrame(X))\n",
    "    \n",
    "    KL_divergence_svm = pd.DataFrame(svm_matrix*np.log(svm_matrix/((log_matrix+svm_matrix)/2))).sum(axis=1)\n",
    "    KL_divergence_log = pd.DataFrame(log_matrix*np.log(log_matrix/((log_matrix+svm_matrix)/2))).sum(axis=1)\n",
    "    KL_divergence = list(np.array(KL_divergence_svm)+np.array(KL_divergence_log)/2)\n",
    "\n",
    "    return KL_divergence\n",
    "\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 952,
   "id": "cfd259ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "## train_committee: learn 2 models to form the committee\n",
    "## use the committee to do data selection based on the above 3 methods\n",
    "## use the selected data to evaluate the accuracy of logistic regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 953,
   "id": "continued-clothing",
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_committee(X, y, penalty, tol, C, max_iter, solver):\n",
    "    \n",
    "    \"\"\"\n",
    "    Train a logistic regression model on dataset (X, y) and return trained model.\n",
    "    X: matrix of real values, size n x d\n",
    "    y: vector of string labels, size n\n",
    "    args: optional arguments e.g., for hyper-parameters\n",
    "    C: number of models in committee\n",
    "    ensemble_type: type of ensemble functions, e.g. LogisticRegressoin, SVM\n",
    "    Could return two models:\n",
    "    – the ensemble and the standard logistic regression model as a tuple \n",
    "    i.e., return (model1, model2)\n",
    "    \"\"\"\n",
    "\n",
    "    ensemble1 = svm.SVC(probability=True, max_iter=200)\n",
    "    ensemble1.fit(X,y)\n",
    "    \n",
    "    ensemble2 = LogisticRegression(multi_class='multinomial', max_iter = 10, solver='saga')\n",
    "    ensemble2.fit(X,y)\n",
    "        \n",
    "    logmod = LogisticRegression(penalty='none',tol = tol, C = C, multi_class='multinomial', solver=solver, max_iter = max_iter)\n",
    "    logmod.fit(X,y)\n",
    "    \n",
    "    return (ensemble1, ensemble2, logmod)\n",
    "\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 954,
   "id": "south-smooth",
   "metadata": {},
   "outputs": [],
   "source": [
    "## your code here for training, evaluation, and plotting code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 955,
   "id": "230ce1f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "size_list = [120, 300, 600, 900, 1200, 1500, 1800, 2100, 2400, 2700, 3000]\n",
    "batch = 60"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 956,
   "id": "91a64e7c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy trained based on vote entropy selection with max_size 120: 0.33350622406639\n",
      "Accuracy trained based on vote entropy selection with max_size 300: 0.37064315352697097\n",
      "Accuracy trained based on vote entropy selection with max_size 600: 0.41109958506224065\n",
      "Accuracy trained based on vote entropy selection with max_size 900: 0.4276970954356846\n",
      "Accuracy trained based on vote entropy selection with max_size 1200: 0.44190871369294604\n",
      "Accuracy trained based on vote entropy selection with max_size 1500: 0.46732365145228216\n",
      "Accuracy trained based on vote entropy selection with max_size 1800: 0.4755186721991701\n",
      "Accuracy trained based on vote entropy selection with max_size 2100: 0.4872406639004149\n",
      "Accuracy trained based on vote entropy selection with max_size 2400: 0.49979253112033195\n",
      "Accuracy trained based on vote entropy selection with max_size 2700: 0.5068464730290456\n",
      "Accuracy trained based on vote entropy selection with max_size 3000: 0.5091286307053942\n"
     ]
    }
   ],
   "source": [
    "# vote_entropy\n",
    "accuracy_vote_entropy = []\n",
    "for size in size_list:\n",
    "    max_size  = size\n",
    "    models_us = pool_based_active_learning(X_pool, y_pool, seed_set, \n",
    "                                     train_committee, \n",
    "                                     query_by_committee_vote_entropy, \n",
    "                                     max_size, batch, \"query_by_committee\", \"vote_entropy\")\n",
    "    score = evaluate_logistic_regression_accuracy(X_test, y_test, models_us)\n",
    "    accuracy_vote_entropy.append(score)\n",
    "    print(f\"Accuracy trained based on vote entropy selection with max_size {size}:\", score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 957,
   "id": "1b94ec63",
   "metadata": {},
   "outputs": [],
   "source": [
    "# max_size = 120\n",
    "# models_us = pool_based_active_learning(X_pool, y_pool, seed_set, \n",
    "#                                      train_committee, \n",
    "#                                      query_by_committee_soft_vote_entropy, \n",
    "#                                      max_size, batch, \"query_by_committee\", \"soft_vote_entropy\")\n",
    "# score = evaluate_logistic_regression_accuracy(X_test, y_test, models_us)\n",
    "# print(score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 958,
   "id": "1a16a670",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy trained based on soft vote entropy selection with max_size 120: 0.33578838174273856\n",
      "Accuracy trained based on soft vote entropy selection with max_size 300: 0.37178423236514524\n",
      "Accuracy trained based on soft vote entropy selection with max_size 600: 0.39574688796680496\n",
      "Accuracy trained based on soft vote entropy selection with max_size 900: 0.42147302904564315\n",
      "Accuracy trained based on soft vote entropy selection with max_size 1200: 0.4366182572614108\n",
      "Accuracy trained based on soft vote entropy selection with max_size 1500: 0.4537344398340249\n",
      "Accuracy trained based on soft vote entropy selection with max_size 1800: 0.4641078838174274\n",
      "Accuracy trained based on soft vote entropy selection with max_size 2100: 0.47313278008298754\n",
      "Accuracy trained based on soft vote entropy selection with max_size 2400: 0.48558091286307054\n",
      "Accuracy trained based on soft vote entropy selection with max_size 2700: 0.4949170124481328\n",
      "Accuracy trained based on soft vote entropy selection with max_size 3000: 0.504356846473029\n"
     ]
    }
   ],
   "source": [
    "# soft_vote_entropy\n",
    "accuracy_soft_vote_entropy = []\n",
    "for size in size_list:\n",
    "    max_size  = size\n",
    "    models_us = pool_based_active_learning(X_pool, y_pool, seed_set, \n",
    "                                     train_committee, \n",
    "                                     query_by_committee_soft_vote_entropy, \n",
    "                                     max_size, batch, \"query_by_committee\", \"soft_vote_entropy\")\n",
    "    score = evaluate_logistic_regression_accuracy(X_test, y_test, models_us)\n",
    "    accuracy_soft_vote_entropy.append(score)\n",
    "    print(f\"Accuracy trained based on soft vote entropy selection with max_size {size}:\", score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 959,
   "id": "a94e4bd5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy trained based on KL divergence selection with max_size 120: 0.31234439834024896\n",
      "Accuracy trained based on KL divergence selection with max_size 300: 0.34865145228215766\n",
      "Accuracy trained based on KL divergence selection with max_size 600: 0.36753112033195023\n",
      "Accuracy trained based on KL divergence selection with max_size 900: 0.39367219917012447\n",
      "Accuracy trained based on KL divergence selection with max_size 1200: 0.4203319502074689\n",
      "Accuracy trained based on KL divergence selection with max_size 1500: 0.4323651452282158\n",
      "Accuracy trained based on KL divergence selection with max_size 1800: 0.44979253112033196\n",
      "Accuracy trained based on KL divergence selection with max_size 2100: 0.4658713692946058\n",
      "Accuracy trained based on KL divergence selection with max_size 2400: 0.4802904564315353\n",
      "Accuracy trained based on KL divergence selection with max_size 2700: 0.48651452282157676\n",
      "Accuracy trained based on KL divergence selection with max_size 3000: 0.48983402489626554\n"
     ]
    }
   ],
   "source": [
    "# KL test\n",
    "accuracy_KL = []\n",
    "for size in size_list:\n",
    "    max_size  = size\n",
    "    models_us = pool_based_active_learning(X_pool, y_pool, seed_set, \n",
    "                                     train_committee, \n",
    "                                     query_by_committee_KL, \n",
    "                                     max_size, batch, \"query_by_committee\", \"KL\")\n",
    "    score = evaluate_logistic_regression_accuracy(X_test, y_test, models_us)\n",
    "    accuracy_KL.append(score)\n",
    "    print(f\"Accuracy trained based on KL divergence selection with max_size {size}:\", score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 960,
   "id": "857630de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(size_list, accuracy_vote_entropy, 'ko-', label = \"vote_entropy\")\n",
    "plt.plot(size_list, accuracy_soft_vote_entropy, 'go-', label = \"soft_vote_entropy\")\n",
    "plt.plot(size_list, accuracy_KL, 'ro-', label = \"KL_Divergence\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "suffering-airport",
   "metadata": {},
   "source": [
    "## 5. Hierarchical sampling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 963,
   "id": "adopted-taylor",
   "metadata": {},
   "outputs": [],
   "source": [
    "## your code\n",
    "# take the 300 nodes in the seed as known nodes\n",
    "\n",
    "from sklearn.cluster import AgglomerativeClustering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1164,
   "id": "58358876",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([29, 19, 15,  1, 16, 25,  5,  1,  1,  1, 16, 28, 19, 12, 16, 13, 17,\n",
       "       17, 11,  8,  5,  1,  9,  2, 19, 29, 24,  8,  6, 22,  1, 13,  0, 13,\n",
       "       13, 22, 22,  1,  1, 13, 17, 17,  2,  8,  5, 29,  5,  5,  8,  8,  2,\n",
       "       10, 10,  6, 14, 10,  1, 10, 10, 17, 29, 16, 26,  2, 28, 15,  7,  5,\n",
       "       28, 29, 11,  4,  4,  4,  4,  4,  4,  4, 11, 11, 14, 29,  7,  8, 17,\n",
       "       13,  9, 10,  5, 10,  3, 24,  3,  0, 18, 24, 10, 10,  3, 26, 14, 24,\n",
       "        6,  6,  0,  0,  6, 19,  0, 26,  0,  3,  0,  3, 26, 22, 24, 14,  0,\n",
       "        0,  6,  6,  8, 24, 27,  9, 18, 27,  3,  6, 13,  9, 26, 26, 15, 25,\n",
       "       15, 13, 28, 28,  3, 25,  1, 27,  1, 12, 24, 24,  9, 29, 20, 20, 27,\n",
       "       24, 12, 20, 20, 20, 21,  1, 16,  5,  2, 16, 13, 18,  2,  0, 16,  2,\n",
       "        0,  9,  1,  2,  2,  1, 29,  1,  6, 22,  3, 29,  3,  8, 13,  0, 27,\n",
       "        9, 29,  3,  0, 17,  9, 27, 17,  0, 12, 12, 11,  2,  7, 19,  7,  3,\n",
       "       25, 24, 27,  7, 20,  7,  7, 11,  7, 21, 21, 21, 21, 21, 21, 18,  2,\n",
       "       15, 19,  2, 15, 15, 15,  2, 22, 10, 29,  0, 29, 29, 25, 20,  7,  3,\n",
       "        6, 26, 22,  1,  8, 23,  6,  0, 12,  1, 23, 19, 19, 16,  6, 17,  2,\n",
       "        2,  1, 22, 25, 24, 19, 13, 16, 12,  5, 18, 23, 18, 25,  5,  2,  1,\n",
       "       12, 19, 19, 13, 21, 23, 23, 25, 16, 20, 19,  1, 23, 18, 20, 28,  6,\n",
       "       17,  3,  1,  7, 24, 10, 14, 10,  0,  7,  1])"
      ]
     },
     "execution_count": 1164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy.cluster.hierarchy import leaders\n",
    "# do hierarchical clustering\n",
    "clustering = AgglomerativeClustering(n_clusters=30).fit(seed_X)\n",
    "clustering.labels_\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1167,
   "id": "a21e5aa0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# seperate labelled and unlabelled data points\n",
    "U_X = []\n",
    "U_y = []\n",
    "L_X = []\n",
    "L_y = []\n",
    "for index in range(len(X_pool)):\n",
    "        if index not in seed_set:\n",
    "            U_X.append(X_pool[index])\n",
    "            U_y.append(y_pool[index])\n",
    "        else:\n",
    "            L_X.append(X_pool[index])\n",
    "            L_y.append(y_pool[index])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1294,
   "id": "1788c90b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AgglomerativeClustering(n_clusters=30)"
      ]
     },
     "execution_count": 1294,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# do hierarchical clustering for the labelled seed set\n",
    "clustering = AgglomerativeClustering(n_clusters=30, affinity='euclidean', linkage='ward').fit(seed_X)\n",
    "clustering\n",
    "# plt.figure()\n",
    "# fig = plt.figure(figsize=(25, 10))\n",
    "# dn = hierarchy.dendrogram(clustering.distances_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1290,
   "id": "35e55f47",
   "metadata": {},
   "outputs": [],
   "source": [
    "import itertools\n",
    "ii = itertools.count(len(seed_X))\n",
    "tree = [{'node_id': next(ii), 'left': x[0], 'right':x[1]} for x in clustering.children_]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1301,
   "id": "fa19108e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([29, 19, 15,  1, 16, 25,  5,  1,  1,  1, 16, 28, 19, 12, 16, 13, 17,\n",
       "       17, 11,  8,  5,  1,  9,  2, 19, 29, 24,  8,  6, 22,  1, 13,  0, 13,\n",
       "       13, 22, 22,  1,  1, 13, 17, 17,  2,  8,  5, 29,  5,  5,  8,  8,  2,\n",
       "       10, 10,  6, 14, 10,  1, 10, 10, 17, 29, 16, 26,  2, 28, 15,  7,  5,\n",
       "       28, 29, 11,  4,  4,  4,  4,  4,  4,  4, 11, 11, 14, 29,  7,  8, 17,\n",
       "       13,  9, 10,  5, 10,  3, 24,  3,  0, 18, 24, 10, 10,  3, 26, 14, 24,\n",
       "        6,  6,  0,  0,  6, 19,  0, 26,  0,  3,  0,  3, 26, 22, 24, 14,  0,\n",
       "        0,  6,  6,  8, 24, 27,  9, 18, 27,  3,  6, 13,  9, 26, 26, 15, 25,\n",
       "       15, 13, 28, 28,  3, 25,  1, 27,  1, 12, 24, 24,  9, 29, 20, 20, 27,\n",
       "       24, 12, 20, 20, 20, 21,  1, 16,  5,  2, 16, 13, 18,  2,  0, 16,  2,\n",
       "        0,  9,  1,  2,  2,  1, 29,  1,  6, 22,  3, 29,  3,  8, 13,  0, 27,\n",
       "        9, 29,  3,  0, 17,  9, 27, 17,  0, 12, 12, 11,  2,  7, 19,  7,  3,\n",
       "       25, 24, 27,  7, 20,  7,  7, 11,  7, 21, 21, 21, 21, 21, 21, 18,  2,\n",
       "       15, 19,  2, 15, 15, 15,  2, 22, 10, 29,  0, 29, 29, 25, 20,  7,  3,\n",
       "        6, 26, 22,  1,  8, 23,  6,  0, 12,  1, 23, 19, 19, 16,  6, 17,  2,\n",
       "        2,  1, 22, 25, 24, 19, 13, 16, 12,  5, 18, 23, 18, 25,  5,  2,  1,\n",
       "       12, 19, 19, 13, 21, 23, 23, 25, 16, 20, 19,  1, 23, 18, 20, 28,  6,\n",
       "       17,  3,  1,  7, 24, 10, 14, 10,  0,  7,  1])"
      ]
     },
     "execution_count": 1301,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clustering.labels_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1173,
   "id": "8940fbda",
   "metadata": {},
   "outputs": [],
   "source": [
    "# construct U, the pool of unlabelled instances and their hidden labels\n",
    "U_X = []\n",
    "U_y = []\n",
    "# construct L, the set of initial labelled instances\n",
    "L_X = []\n",
    "L_y = []\n",
    "for index in range(len(X_pool)):\n",
    "    if index not in seed_set:\n",
    "        U_X.append(X_pool[index])\n",
    "        U_y.append(y_pool[index])\n",
    "    else:\n",
    "        L_X.append(X_pool[index])\n",
    "        L_y.append(y_pool[index])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1303,
   "id": "a38d87a8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([10, 10, 10, 10, 10, 10, 10, 17, 10, 77, 10, 57, 10, 10, 10, 70, 39,\n",
       "       35, 10, 10, 10, 10, 10, 60, 10, 76, 10, 10, 10, 10, 16, 10, 10, 10,\n",
       "       10, 86,  2, 10, 66, 10, 10, 10, 10, 24, 10, 10, 10, 68, 10, 34, 79,\n",
       "       10, 69, 95, 10, 21, 20, 62,  6, 10, 10, 10, 46, 65, 10, 10, 30, 37,\n",
       "        1, 10, 10, 71, 89, 81, 10, 10,  3, 25, 10, 23, 10, 85, 99, 10, 10,\n",
       "       40, 10, 10,  1, 10, 42,  3, 10, 10, 10, 64, 10, 10, 63, 10, 22, 10,\n",
       "       11, 74, 10, 10, 10, 10, 90,  7,  4, 10,  8, 32, 10, 10, 10, 26, 10,\n",
       "       10,  2, 10, 10, 10, 10, 10, 10, 10, 10, 10, 48, 10, 10, 28, 10, 10,\n",
       "       10, 10, 10, 10, 10, 10, 10, 11, 10, 10,  3, 33, 10, 36, 53, 83, 10,\n",
       "       10, 10, 10, 44, 80, 92, 10, 10, 10,  4, 19, 11, 10, 10, 10, 10, 15,\n",
       "       87, 91, 10, 10, 10, 10, 10, 10,  3, 13, 73, 10, 10, 10, 52, 56, 10,\n",
       "       45,  5, 10, 61, 10, 94, 58, 14, 10, 12, 47, 10, 31, 59, 10, 10,  5,\n",
       "       10, 10,  9, 55, 10, 10, 10, 51, 10,  6, 10, 10, 43, 10, 10, 50, 10,\n",
       "       98, 10, 10, 10, 41, 18, 29, 10, 10, 10,  8, 10, 10, 38, 10, 97, 82,\n",
       "       67, 10, 10, 10, 27, 10, 10,  9, 10, 10, 10, 10, 78, 10, 96,  3, 10,\n",
       "       88,  1, 10, 10, 10, 10, 10, 49, 10,  3, 10, 10, 93, 84, 10, 10, 10,\n",
       "       10, 10, 10, 10, 10, 10, 10, 54, 10, 10, 10, 10, 75, 10, 10, 10, 10,\n",
       "        7, 10, 10, 10, 72, 10, 10, 10, 10, 10, 10], dtype=int32)"
      ]
     },
     "execution_count": 1303,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy.cluster.hierarchy import ward, fcluster, leaders, fclusterdata\n",
    "from scipy.spatial.distance import pdist\n",
    "\n",
    "Z = linkage(L_X, 'ward')\n",
    "T = fcluster(Z, 3, criterion='distance')\n",
    "L, M = leaders(Z, T)\n",
    "fclusterdata(L_X, t=1.15430908073915)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1287,
   "id": "12821865",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from scipy.cluster import hierarchy\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "Z = linkage(L_X, 'ward')\n",
    "plt.figure()\n",
    "fig = plt.figure(figsize=(25, 10))\n",
    "dn = hierarchy.dendrogram(Z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1197,
   "id": "78f2b826",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Z = linkage(L_X, 'average')\n",
    "plt.figure()\n",
    "fig = plt.figure(figsize=(25, 10))\n",
    "dn = hierarchy.dendrogram(Z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1198,
   "id": "40eb6674",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Z = linkage(L_X, 'single')\n",
    "plt.figure()\n",
    "fig = plt.figure(figsize=(25, 10))\n",
    "dn = hierarchy.dendrogram(Z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fdf4814d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def hierarchical_sampleing(X_pool, seed_set, batch_size, max_size, select):\n",
    "    \n",
    "    # clusters: Hierarchical clustering of unlabelled points = X_pool - seed_X\n",
    "    # select: controls the selective sampling\n",
    "    \n",
    "    # Z = ward(pdist(seed_X)) # linkage matrix of data\n",
    "    # T = fcluster(Z, 30, criterion='distance') cluster\n",
    "    \n",
    "    \n",
    "    # construct U, the pool of unlabelled instances and their hidden labels\n",
    "    U_X = []\n",
    "    U_y = []\n",
    "    # construct L, the set of initial labelled instances\n",
    "    L_X = []\n",
    "    L_y = []\n",
    "    for index in range(len(X_pool)):\n",
    "        if index not in seed_set:\n",
    "            U_X.append(X_pool[index])\n",
    "            U_y.append(y_pool[index])\n",
    "        else:\n",
    "            L_X.append(X_pool[index])\n",
    "            L_y.append(y_pool[index])\n",
    "\n",
    "    # perform hierarchical clustering and search the root\n",
    "    clustering = AgglomerativeClustering(n_clusters=30, affinity='euclidean', linkage='ward').fit(L_X)\n",
    "    root, tree = find_root(clustering)\n",
    "    \n",
    "    b = batch_size\n",
    "    T = int(max_size/batch_size)\n",
    "    \n",
    "    for t in range(0, T):\n",
    "        for i in range(batch_size):\n",
    "            theta_t = train_func(np.array(L_X), np.array(L_y), 'none', 0.0001, 1.0, 10, 'sag')\n",
    "            r = select_func(U_X, theta_t) # select \n",
    "            j = r.index(max(r)) \n",
    "            \n",
    "            # query the label\n",
    "            x_j = U_X[j]\n",
    "            L_X.append(np.array(x_j))\n",
    "            U_X.pop(j)\n",
    "            y_j = U_y[j]\n",
    "            L_y.append(np.array(y_j))\n",
    "            U_y.pop(j)\n",
    "            \n",
    "            \n",
    "        \n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bcfb61b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def find_root(clustering):\n",
    "    \n",
    "    \"\"\"\n",
    "    clustering: a hierarchical cluster of labelled dataset\n",
    "    \n",
    "    \"\"\"\n",
    "    \n",
    "    \n",
    "#     # form hierarchical clusters\n",
    "#     clustering = AgglomerativeClustering(n_clusters=30, affinity='euclidean', linkage='ward').fit(L_X)\n",
    "    \n",
    "    # construct tree\n",
    "    ii = itertools.count(len(seed_X))\n",
    "    tree = [{'node_id': next(ii), 'left': x[0], 'right':x[1]} for x in clustering.children_]\n",
    "    \n",
    "    #search root\n",
    "    \n",
    "    leftChild = []\n",
    "    rightChild = []\n",
    "    \n",
    "    for i in range(len(tree)):\n",
    "        leftChild.append(tree[i][\"left\"])\n",
    "        rightChild.append(tree[i][\"right\"])\n",
    "        \n",
    "    root = []\n",
    "    for i in range(len(tree)):\n",
    "        if tree[i][\"node_id\"] not in leftChild and tree[i][\"node_id\"] not in rightChild:\n",
    "            root.append(tree[i][\"node_id\"])\n",
    "            \n",
    "    for i in range(len(tree)):\n",
    "        if tree[i][\"node_id\"] == root[0]:\n",
    "            root = tree[i]\n",
    "            break\n",
    "    \n",
    "    return root, tree # return a dictionary of root contains its id, left and right child\n",
    "                      # and a list of dictionary of nodes\n",
    "    \n",
    "    pass\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
